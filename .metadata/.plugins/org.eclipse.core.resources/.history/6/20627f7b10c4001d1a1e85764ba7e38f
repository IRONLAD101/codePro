package com.location;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import com.location.controller.ISSLocationController;
import com.location.exceptions.LocationServiceException;
import com.location.response.ISSLocation;
import com.location.service.LocationService;
import com.location.service.LocationServiceImpl;

@SpringBootTest
public class IssLocationControllerTest {
	
	@InjectMocks
	ISSLocationController issLocationController;
	
	@Mock
    private LocationService locationService = new LocationServiceImpl();

    @Test
    public void testGetIssLocationWhenApiIsUp() {
    	MockHttpServletRequest request = new MockHttpServletRequest();
        RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request));
        
        ISSLocation issLocation = new ISSLocation();
        ResponseEntity<ISSLocation> mockResponse = new ResponseEntity<>(issLocation, HttpStatus.OK);
        try {
			when(locationService.getCurrentLocation()).thenReturn(issLocation);
		} catch (LocationServiceException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        when(issLocationController.getCurrentLocation1()).thenReturn(mockResponse);
        
        MockHttpServletResponse response = new MockHttpServletResponse();
        

        assertThat(mockResponse.getStatusCode()).isEqualTo(HttpStatus.OK);
        //assertThat(mockResponse.getHeaders().getLocation().getPath()).isEqualTo("/1");
    }
/*
    @Test
    public void testGetIssLocationWhenApiIsDownAndRetrySucceeds() {
        // Arrange
        String apiUrl = "https://api.wheretheiss.at/v1/satellites/25544";
        String expectedResponse = "{\"latitude\": 51.2345, \"longitude\": 11.6789}";
        ResponseEntity<String> mockResponse = new ResponseEntity<>(expectedResponse, HttpStatus.OK);
        when(restTemplate.getForEntity(apiUrl, String.class))
                .thenThrow(new RestClientException("API is down"))
                .thenReturn(mockResponse);

        // Act
        ISSLocationController controller = new ISSLocationController();
        ResponseEntity<ISSLocation> response = controller.getCurrentLocation();

        // Assert
        Assertions.assertEquals(HttpStatus.OK, response.getStatusCode());
        Assertions.assertEquals(51.2345, response.getBody().getLatitude());
        Assertions.assertEquals(11.6789, response.getBody().getLongitude());
        verify(restTemplate, times(2)).getForEntity(apiUrl, String.class);
    }

    @Test
    public void testGetIssLocationWhenApiIsDownAndRetryFails() {
        // Arrange
        String apiUrl = "https://api.wheretheiss.at/v1/satellites/25544";
        when(restTemplate.getForEntity(apiUrl, String.class)).thenThrow(new RestClientException("API is down"));

     // Act
        ISSLocationController controller = new ISSLocationController();
        ResponseEntity<ISSLocation> response = controller.getCurrentLocation();

        // Assert
        Assertions.assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
        Assertions.assertEquals(0.0, response.getBody().getLatitude());
        Assertions.assertEquals(0.0, response.getBody().getLongitude());
        verify(restTemplate, times(2)).getForEntity(apiUrl, String.class);
    }
    */
}
