package com.location;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

import java.net.URI;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.retry.annotation.EnableRetry;
import org.springframework.test.web.client.MockRestServiceServer;
import org.springframework.web.client.RestTemplate;

import com.location.response.ISSLocation;
import com.location.service.LocationServiceImpl;

@ExtendWith(MockitoExtension.class)
@EnableRetry
public class IssLocationApplicationTests {

	@Mock
	private RestTemplate restTemplateMock;
	
	private MockRestServiceServer mockServer;


	private LocationServiceImpl locationService;

	private static final String API_URL = "http://api.open-notify.org/iss-now.json";

	@BeforeEach
	public void setup() {
		locationService = new LocationServiceImpl();
		locationService.rest = restTemplateMock;
		mockServer = MockRestServiceServer.createServer(restTemplateMock);
		locationService.API_URL = API_URL;
	}

	@Test
	public void testGetCurrentLocation_Success() throws Exception {
		ISSLocation expectedLocation = new ISSLocation();
		expectedLocation.setLatitude(10.0);
		expectedLocation.setLongitude(20.0);
		ResponseEntity<ISSLocation> response = new ResponseEntity<>(expectedLocation, HttpStatus.OK);

		when(restTemplateMock.getForEntity(any(URI.class), any(Class.class))).thenReturn(response);
		
		mockServer.verify();

		//ISSLocation actualLocation = locationService.getCurrentLocation();

		assertEquals(expectedLocation, actualLocation);
	}

}
