package com.location;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.retry.annotation.EnableRetry;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestTemplate;

import com.location.exceptions.LocationServiceException;
import com.location.response.ISSLocation;
import com.location.service.LocationServiceImpl;

@RunWith(SpringRunner.class)
@EnableRetry
class IssLocationApplicationTests {

	@Mock
	private RestTemplate restTemplateMock;

	@Mock
	private LocationServiceImpl locationService;

	private static final String API_URL = "http://api.open-notify.org/iss-now.json";

	@BeforeEach
	public void setup() {
		locationService = new LocationServiceImpl();
		locationService.rest = restTemplateMock;
		locationService.API_URL = API_URL;
	}

	@Test
	void testGetCurrentLocation_Success() throws Exception {
		ISSLocation expectedLocation = new ISSLocation();
		expectedLocation.setLatitude(10.0);
		expectedLocation.setLongitude(20.0);
		ResponseEntity<ISSLocation> response = new ResponseEntity<>(expectedLocation, HttpStatus.OK);

		when(restTemplateMock.getForEntity(API_URL, ISSLocation.class)).thenReturn(response);

		ISSLocation actualLocation = locationService.getCurrentLocation();

		assertEquals(expectedLocation, actualLocation);
	}
	
	@Test
    void testGetCurrentLocation_Retry_Success() throws Exception {
        ISSLocation expectedLocation = new ISSLocation();
		expectedLocation.setLatitude(10.0);
		expectedLocation.setLongitude(20.0);
        ResponseEntity<ISSLocation> errorResponse = new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        ResponseEntity<ISSLocation> validResponse = new ResponseEntity<>(expectedLocation, HttpStatus.OK);

        when(restTemplateMock.getForEntity(API_URL, ISSLocation.class))
            .thenThrow(new RestClientException("Exception while connecting ISS api"))
            .thenReturn(errorResponse).thenReturn(validResponse).thenReturn(validResponse);

        ISSLocation actualLocation = locationService.getCurrentLocation();

        assertEquals(expectedLocation, actualLocation);
    }
	
	@Test
    void testGetCurrentLocation_Retry_Failure() throws Exception {
        ResponseEntity<ISSLocation> response = new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);

        when(restTemplateMock.getForEntity(API_URL, ISSLocation.class))
            .thenThrow(new RestClientException("First exception"))
            .thenReturn(response).thenReturn(response);
/*            .thenReturn(response)
            .thenReturn(response);*/

        try {
            locationService.getCurrentLocation();
        } catch (LocationServiceException ex) {
            assertEquals("Error retrieving current location of ISS from API", ex.getMessage());
        }
    }
	
	 @Test
	    void testRecover_LastKnownLocation() throws Exception {
	        ISSLocation lastKnownLocation = new ISSLocation();
	        lastKnownLocation.setLatitude(10.0);
	        lastKnownLocation.setLongitude(20.0);
	        locationService.lastKnownLocation = lastKnownLocation;

	        ISSLocation actualLocation = locationService.recover(new LocationServiceException("Error"));

	        assertEquals(lastKnownLocation, actualLocation);
	    }

	    @Test
	    void testRecover_DefaultLocation() throws Exception {
	        ISSLocation actualLocation = locationService.recover(new LocationServiceException("Error"));

	        ISSLocation expectedLocation = new ISSLocation();
	        expectedLocation.setLatitude(0.0);
	        expectedLocation.setLongitude(0.0);
	        assertEquals(expectedLocation.getLatitude(), actualLocation.getLatitude());
	        assertEquals(expectedLocation.getLongitude(), actualLocation.getLongitude());
	    }

}
