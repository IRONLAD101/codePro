package com.location;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.when;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import com.location.controller.ISSLocationController;
import com.location.exceptions.LocationServiceException;
import com.location.response.ISSLocation;
import com.location.service.LocationService;

@ExtendWith(MockitoExtension.class)
public class IssLocationControllerTest {
	
	@Mock
    LocationService locationService;

    @InjectMocks
    ISSLocationController issLocationController;

    @Test
    void getCurrentLocation1() throws LocationServiceException {
        // Arrange
        ISSLocation location = new ISSLocation(51.5072, -0.1276);
        when(locationService.getCurrentLocation()).thenReturn(location);

        // Act
        ResponseEntity<ISSLocation> response = issLocationController.getCurrentLocation1();

        // Assert
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(location, response.getBody());
    }
    
    @Test
    void getCurrentLocation1_error() throws LocationServiceException {
        // Arrange
        String errorMsg = "Something went wrong";
        when(locationService.getCurrentLocation()).thenThrow(new LocationServiceException(errorMsg));

        // Act
        ResponseEntity<ISSLocation> response = issLocationController.getCurrentLocation1();

        // Assert
        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
    }
/*
    @Test
    public void testGetIssLocationWhenApiIsDownAndRetrySucceeds() {
        // Arrange
        String apiUrl = "https://api.wheretheiss.at/v1/satellites/25544";
        String expectedResponse = "{\"latitude\": 51.2345, \"longitude\": 11.6789}";
        ResponseEntity<String> mockResponse = new ResponseEntity<>(expectedResponse, HttpStatus.OK);
        when(restTemplate.getForEntity(apiUrl, String.class))
                .thenThrow(new RestClientException("API is down"))
                .thenReturn(mockResponse);

        // Act
        ISSLocationController controller = new ISSLocationController();
        ResponseEntity<ISSLocation> response = controller.getCurrentLocation();

        // Assert
        Assertions.assertEquals(HttpStatus.OK, response.getStatusCode());
        Assertions.assertEquals(51.2345, response.getBody().getLatitude());
        Assertions.assertEquals(11.6789, response.getBody().getLongitude());
        verify(restTemplate, times(2)).getForEntity(apiUrl, String.class);
    }

    @Test
    public void testGetIssLocationWhenApiIsDownAndRetryFails() {
        // Arrange
        String apiUrl = "https://api.wheretheiss.at/v1/satellites/25544";
        when(restTemplate.getForEntity(apiUrl, String.class)).thenThrow(new RestClientException("API is down"));

     // Act
        ISSLocationController controller = new ISSLocationController();
        ResponseEntity<ISSLocation> response = controller.getCurrentLocation();

        // Assert
        Assertions.assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
        Assertions.assertEquals(0.0, response.getBody().getLatitude());
        Assertions.assertEquals(0.0, response.getBody().getLongitude());
        verify(restTemplate, times(2)).getForEntity(apiUrl, String.class);
    }
    */
}
